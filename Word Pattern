class Solution {
public:
    bool wordPattern(string pattern, string str) {
        
        unordered_map<char,string> mp;
        unordered_map<string,char> revmp;
        int j=0;
        
        for(int i=0;i<pattern.length();i++)
        {
            string newstr;
            
            if(j>str.length())
            return false;
            
            while(str[j]!=' ' && j<str.length())
            {
                newstr+=str[j];
                j++;
            }
            
            j++;
            
            
            
            if(mp.find(pattern[i])!=mp.end() && revmp.find(newstr)==revmp.end())
            return false;
            else if(mp.find(pattern[i])==mp.end() && revmp.find(newstr)!=revmp.end())
            return false;
            else
            {
                mp[pattern[i]]=newstr;
                revmp[newstr]=pattern[i];
            }
            
            
        }
        
        if(j<str.length())
        return false;
        
        return true;
    }
};
